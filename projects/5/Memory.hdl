// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/Memory.hdl
/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load=1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid and reads 0. Access to any address
 * in the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the Screen
 * and Keyboard chip specifications given in the lectures and the book.
 */
CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    /*
    Not16(in[15]=true,in[13..14]=false,in[0..12]=true,out[0..14]=maxAddress);
    Not16(in[0..14]=maxAddress,out[0..14]=flipMaxAddress);
    Add16(a[0..14]=flipMaxAddress,b[0..14]=true,out[0..14]=maxAddress2complement);
    */
    /*Testing value*/
    /*16383   ---> this should be allowed*/
    Not16(in[14..15]=true,in[0..13]=false,out=testOutput);
    /*25000 ---> this should be NOT allowed*/
    Not16(in[15]=true,in[13..14]=false,in[9..12]=true,in[7..8]=false,in[6]=true,in[4]=true,in[0..2]=true,out=testOutput2);

    Not16(in[15]=true,in[13..14]=false,in[0..12]=true,out=maxAddress);
    Not16(in=maxAddress,out=flipMaxAddress);
    Add16(a=flipMaxAddress,b[0]=true,b[1..15]=false,out=maxAddress2complement);


/*Att
     testOutput ---> this should be allowed
     maxAddress ---> this should be allowed
     testOutput2 ---> this should be Not allowed
     
*/
    Add16(a=testOutput2,b=maxAddress2complement,out[14]=errorHandlerOutputMb,out[0..7]=errorHandlerOutputFP,out[8..14]=errorHandlerOutputSP);
    Or8Way(in=errorHandlerOutputFP,out=isZeroFP);
    Or8Way(in=errorHandlerOutputFP,out=isZeroSP);
    Or(a=isZeroFP,b=isZeroSP,out=isZeroFinal);
    Mux(a=true,b=false,sel=isZeroFinal,out=isZeroOutput);
    Mux(a=isZeroOutput,b=true,sel=errorHandlerOutputMb,out=keepGoingOutput);

  /*Logic handling I did already the design in a piece of paper*/
  /*max_data --> 0x4000*/
  Not16(in[15]=true,in[14]=false,in[0..13]=true,out=maxData);
  /*maxScreen --> 0x5FFF*/
  Not16(in[15]=true,in[13..14]=false,in[0..12]=true,out=maxScreen);
  /*toRam --> output 00*/
  Not16(in[0..15]=true,out=toRam);
  /*toScreen --> 01*/
  Not16(in[15]=true,in[0]=false,in[1]=true,in[2..14]=true,out=toScreen);
  /*toKeyboard --> 10*/
  Not16(in[15]=true,in[0]=true,in[1]=false,in[2..14]=true,out=toKeyboard);
  /*Muxes to get the correct chip*/
  Mux16(a = toKeyboard , b =toScreen , sel = inScreenComparison, out =screenOrKeyboard );
  Mux16(a = screenOrKeyboard , b =toRam , sel = inRamComparison, out =RamOrscreenOrKeyboard );



  

	//// Replace this comment with your code.
}
