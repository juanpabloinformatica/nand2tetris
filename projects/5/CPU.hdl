// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.

 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	//// Replace this comment with your code.
  //// Instruction  handling

  ////Mux16(a=instruction[1..15] , b=aluOutput[1..15] , sel=instruction[0] , out=outputFirstMux);
  Mux16(a=instruction , b=aluOutput , sel=instruction[0] , out=outputFirstMux);

  Mux(a=false,b=true,sel=instruction[10],out=getAluOutput);
  Mux(a=true,b=getAluOutput,sel=instruction[0],out=outputC1);
  ARegister(in =outputFirstMux , load =outputC1 , out =outputAregister,out[1..15]=addressM );

  //// Alu operations input
  Mux(a=false,b=true,sel=instruction[3],out=getInM);
  Mux(a=false,b=getInM,sel=instruction[0],out=outputC5);
  Mux16(a=outputAregister,b=inM,sel=outputC5,out=outputSecondMux);

  Mux(a=false,b=true,sel=instruction[11],out=getAluOutput2);
  Mux(a=false,b=getAluOutput2,sel=instruction[0],out=outputC3);
  DRegister(in=aluOutput,load=outputC3,out=outputDregister);

  ALU(x = outputDregister, y = outputSecondMux , zx = instruction[4] , nx = instruction[5] , zy = instruction[6], ny = instruction[7] , f = instruction[8] , no = instruction[9] , out =aluOutput , zr =outputZr , ng = outputNg);

  Mux(a=false,b=true,sel=instruction[12],out=getWriteM);
  Mux(a=false,b=getWriteM,sel=instruction[0],out=WriteM);

  //// PC logic -> jumping

  //// C1

   Xor(a = instruction[13] , b = false , out =outIJ1C1);
   Not(in =outIJ1C1 , out = outJ1C1);
   Xor(a = instruction[14], b = false, out = outIJ2C1);
   Not(in =outIJ2C1 , out =outJ2C1 );
   Xor(a = instruction[15], b = false, out = outIJ3C1);
   Not(in =outIJ3C1 , out =outJ3C1 );
   And(a = outJ1C1, b =outJ2C1 , out =outFirstAndC1 );
   And(a =outFirstAndC1 , b = outJ3C1, out =outC1 );

  //// C2

   Xor(a = instruction[13] , b = false , out =outIJ1C2);
   Not(in =outIJ1C2 , out = outJ1C2);
   Xor(a = instruction[14], b = false, out = outIJ2C2);
   Not(in =outIJ2C2 , out =outJ2C2 );
   Xor(a = instruction[15], b = true, out = outIJ3C2);
   Not(in =outIJ3C2 , out =outJ3C2 );
   Xor(a = outputZr ,b = false, out = outIZrC2);
   Not(in =outIZrC2 , out =outZrC2 );
   Xor(a = outputNg , b = false , out =outINgC2);
   Not(in =outINgC2 , out = outNgC2);
   And(a = outJ1C2, b =outJ2C2 , out =outFirstAndC2 );
   And(a = outFirstAndC2, b =outJ3C2 , out =outSecondAndC2 );
   And(a = outSecondAndC2, b =outZrC2 , out =outThirdAndC2 );
   And(a = outThirdAndC2, b =outNgC2 , out =outC2 );


  //// C3

   Xor(a = instruction[13] , b = false , out =outIJ1C3);
   Not(in =outIJ1C3 , out = outJ1C3);
   Xor(a = instruction[14], b = true, out = outIJ2C3);
   Not(in =outIJ2C3 , out =outJ2C3 );
   Xor(a = instruction[15], b = false, out = outIJ3C3);
   Not(in =outIJ3C3 , out =outJ3C3 );
   Xor(a = outputZr ,b = true, out = outIZrC3);
   Not(in =outIZrC3 , out =outZrC3 );
   Xor(a = outputNg , b = false , out =outINgC3);
   Not(in =outINgC3 , out = outNgC3);
   And(a = outJ1C3, b =outJ2C3 , out =outFirstAndC3 );
   And(a = outFirstAndC3, b =outJ3C3 , out =outSecondAndC3 );
   And(a = outSecondAndC3, b =outZrC3 , out =outThirdAndC3 );
   And(a = outThirdAndC3, b =outNgC3 , out =outC3 );

  //// C4

   Xor(a = instruction[13] , b = false , out =outIJ1C4);
   Not(in =outIJ1C4 , out = outJ1C4);
   Xor(a = instruction[14], b = true, out = outIJ2C4);
   Not(in =outIJ2C4 , out =outJ2C4 );
   Xor(a = instruction[15], b = true, out = outIJ3C4);
   Not(in =outIJ3C4 , out =outJ3C4 );
   Xor(a = outputZr ,b = true, out = outIZrC4);
   Not(in =outIZrC4 , out =outZrC4 );
   Xor(a = outputNg , b = false , out =outINgC4);
   Not(in =outINgC4 , out = outNgC4);
   And(a = outJ1C4, b =outJ2C4 , out =outFirstAndC4 );
   And(a = outFirstAndC4, b =outJ3C4 , out =outSecondAndC4 );
   And(a = outSecondAndC4, b =outZrC4 , out =outThirdAndC4 );
   And(a = outThirdAndC4, b =outNgC4 , out =outC4 );

  //// C5

   Xor(a = instruction[13] , b = true , out =outIJ1C5);
   Not(in =outIJ1C5 , out = outJ1C5);
   Xor(a = instruction[14], b = false, out = outIJ2C5);
   Not(in =outIJ2C5 , out =outJ2C5 );
   Xor(a = instruction[15], b = false, out = outIJ3C5);
   Not(in =outIJ3C5 , out =outJ3C5 );
   Xor(a = outputZr ,b = false, out = outIZrC5);
   Not(in =outIZrC5 , out =outZrC5 );
   Xor(a = outputNg , b = true , out =outINgC5);
   Not(in =outINgC5 , out = outNgC5);
   And(a = outJ1C5, b =outJ2C5 , out =outFirstAndC5 );
   And(a = outFirstAndC5, b =outJ3C5 , out =outSecondAndC5 );
   And(a = outSecondAndC5, b =outZrC5 , out =outThirdAndC5 );
   And(a = outThirdAndC5, b =outNgC5 , out =outC5 );

  //// C6

   Xor(a = instruction[13] , b = true , out =outIJ1C6);
   Not(in =outIJ1C6 , out = outJ1C6);
   Xor(a = instruction[14], b = false, out = outIJ2C6);
   Not(in =outIJ2C6 , out =outJ2C6 );
   Xor(a = instruction[15], b = true, out = outIJ3C6);
   Not(in =outIJ3C6 , out =outJ3C6 );
   Xor(a = outputZr ,b = false, out = outIZrC6);
   Not(in =outIZrC6 , out =outZrC6 );
   And(a = outJ1C6, b =outJ2C6 , out =outFirstAndC6 );
   And(a = outFirstAndC6, b =outJ3C6 , out =outSecondAndC6 );
   And(a = outSecondAndC6, b =outZrC6 , out =outC6 );

  //// C7

   Xor(a = instruction[13] , b = true , out =outIJ1C7);
   Not(in =outIJ1C7 , out = outJ1C7);
   Xor(a = instruction[14], b = true, out = outIJ2C7);
   Not(in =outIJ2C7 , out =outJ2C7 );
   Xor(a = instruction[15], b = false, out = outIJ3C7);
   Not(in =outIJ3C7 , out =outJ3C7 );
   Xor(a = outputZr ,b = true, out = outIZrC7);
   Not(in =outIZrC7 , out =outZrC7 );
   Xor(a = outputNg , b = true , out =outINgC7);
   Not(in =outINgC7 , out = outNgC7);
   And(a = outJ1C7, b =outJ2C7 , out =outFirstAndC7 );
   And(a = outFirstAndC7, b =outJ3C7 , out =outSecondAndC7 );
   And(a = outSecondAndC7, b =outZrC7 , out =outThirdAndC7 );
   And(a = outThirdAndC7, b =outNgC7 , out =outC7 );

  //// C8

   Xor(a = instruction[83] , b = true , out =outIJ8C8);
   Not(in =outIJ8C8 , out = outJ8C8);
   Xor(a = instruction[84], b = true, out = outIJ2C8);
   Not(in =outIJ2C8 , out =outJ2C8 );
   Xor(a = instruction[85], b = true, out = outIJ3C8);
   Not(in =outIJ3C8 , out =outJ3C8 );
   And(a = outJ8C8, b =outJ2C8 , out =outFirstAndC8 );
   And(a =outFirstAndC8 , b = outJ3C8, out =outC8 );

   //// getting the load condition
  Or(a = outC1 , b = outC2, out = outFirstOr);
  Or(a =outFirstOr , b =outC3 , out = outSecondOr);
  Or(a =outSecondOr , b =outC4 , out = outThirdOr);
  Or(a =outThirdOr , b =outC5 , out = outFourthOr);
  Or(a =outFourthOr , b =outC6 , out = outFithOr);
  Or(a =outFithOr , b =outC7 , out = outSixthOr);
  Or(a =outSixthOr , b =outC8 , out = outFinalOr);

}
