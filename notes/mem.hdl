CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];
    PARTS:
    /*Testing value*/
    /*-1 this should not be allowed*/
    Not16(in=false,out=testNegative,out[15]=testNegativeMSB);
    /*16383   ---> this should be allowed*/
    Not16(in[14..15]=true,in[0..13]=false,out=testOutput,out[15]=testOutputMSB);
    /*25000 ---> this should be NOT allowed*/
    Not16(in[15]=true,in[13..14]=false,in[9..12]=true,in[7..8]=false,in[6]=true,in[4]=true,in[0..2]=true,out=testOutput2,out[15]=testOutput2MSB);
    /* 20000 */
    Not16(in[15]=true,in[14]=false,in[12..13]=true,in[9..11]=false,in[6..8]=true,in[5]=true,in[0..4]=true,out=testOutput3,out[15]=testOutput3MSB);
    /*Define*/
    /*maxCapacity   == 24576
      Because I will do a boolean condition in < maxCapacity
    */
     Not16(in[15] = true , in[13..14]=false,in[0..12]=true, out =maxCapacity,out[15]=maxCapacityMSB );
     /*maxCapacity + 1  == 24577
      Because I will do a boolean condition in < maxCapacity
    */
     Not16(in[15] = true , in[13..14]=false,in[1..12]=true,in[0]=false, out =maxCapacityPlusOne,out[15]=maxCapacityPlusOneMSB );
    /*maxScreen   == 24575
      Because I will do a boolean condition in < maxCapacity
    */
      Not16(in[15]=true,in[14]=false,in[13]=true,in[0..12]=false,out=maxScreen);

    /*Number validation*/
    /*Xor(a=true,b=false,out=numberIGTZero);*/
    /*Not(in=numberIGTZero,out=numberGTZero);*/

    /*Not16(in=maxCapacityPlusOne,out=maxCapacityoneComplement);*/
    /*Add16(a=maxCapacityPlusOne,b=true,out=maxCapacityTwoComplement);*/
    /*Add16(a=maxCapacityTwoComplement,b=in,out=diffInMaxCapacity,out[15]=diffInMaxCapacityMSB);*/
    /*Xor(a=diffInMaxCapacityMSB,b=true,out=resultValidINAddition);*/
    /*Not(in=resultValidINAddition,out=resultValidNAddition);*/
    /*And(a=numberGTZero,b=resultValidNAddition,out=validNumber);*/

    /*Number validation test*/
    /*change a*/
    Xor(a=false,b=false,out=numberIGTZero);
    Not(in=numberIGTZero,out=numberGTZero);

    Not16(in=maxCapacityPlusOne,out=maxCapacityOneComplement);
    Add16(a=maxCapacityOneComplement,b[0]=true,out=maxCapacityTwoComplement);
    /*change b*/
    Add16(a=maxCapacityTwoComplement,b=testOutput3,out=diffInMaxCapacity,out[15]=diffInMaxCapacityMSB);
    Xor(a=diffInMaxCapacityMSB,b=true,out=resultValidINAddition);
    Not(in=resultValidINAddition,out=resultValidNAddition);
    And(a=numberGTZero,b=resultValidNAddition,out=validNumber);
    /*valid number need to be concatenated with distribution*/
    /*Distribution*/

    Not16(in=maxCapacity,out=maxCapacityOneComplementt);
    Add16(a=maxCapacityOneComplementt,b[0]=true,out=maxCapacityTwoComplementt);
    /*change b*/
    Add16(a=maxCapacityTwoComplementt,b=testOutput3,out=diffInMaxCapacityt,out=outDiff2,out[15]=diffInMaxCapacitytMSB);

   Or8Way(in[0]=outDiff2[0],in[1]=outDiff2[1],in[2]=outDiff2[2],in[3]=outDiff2[3],in[4]=outDiff2[4],in[5]=outDiff2[5],in[6]=outDiff2[6],in[7]=outDiff2[7] out =finalOrFp );
   Or8Way(in[0]=outDiff2[8],in[1]=outDiff2[9],in[2]=outDiff2[10],in[3]=outDiff2[11],in[4]=outDiff2[12],in[5]=outDiff2[13],in[6]=outDiff2[14],in[7]=outDiff2[15] out =finalOrSp );
   Or(a=finalOrFp,b=finalOrSp,out=zeroKeyOneNoKey);



}

